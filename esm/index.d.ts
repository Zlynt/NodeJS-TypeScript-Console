/// <reference types="node" />
/// <reference types="node" />
declare function logWithTitle(title: any, message: any): void;
declare function textInBox(text: any, boxColor: string): void;
declare const _default: {
    text: {
        green: (text: any) => string;
        red: (text: any) => string;
        yellow: (text: any) => string;
        blue: (text: any) => string;
        magenta: (text: any) => string;
        cyan: (text: any) => string;
        white: (text: any) => string;
        black: (text: any) => string;
        underscore: (text: any) => string;
        bright: (text: any) => string;
        reverse: (text: any) => string;
        bold: (text: any) => string;
    };
    background: {
        green: (text: any) => string;
        red: (text: any) => string;
        yellow: (text: any) => string;
        blue: (text: any) => string;
        magenta: (text: any) => string;
        cyan: (text: any) => string;
        white: (text: any) => string;
        black: (text: any) => string;
    };
    logWithTitle: typeof logWithTitle;
    textInBox: typeof textInBox;
    assert(condition?: boolean | undefined, ...data: any[]): void;
    assert(value: any, message?: string | undefined, ...optionalParams: any[]): void;
    clear(): void;
    clear(): void;
    count(label?: string | undefined): void;
    count(label?: string | undefined): void;
    countReset(label?: string | undefined): void;
    countReset(label?: string | undefined): void;
    debug(...data: any[]): void;
    debug(message?: any, ...optionalParams: any[]): void;
    dir(item?: any, options?: any): void;
    dir(obj: any, options?: import("util").InspectOptions | undefined): void;
    dirxml(...data: any[]): void;
    dirxml(...data: any[]): void;
    error(...data: any[]): void;
    error(message?: any, ...optionalParams: any[]): void;
    group(...data: any[]): void;
    group(...label: any[]): void;
    groupCollapsed(...data: any[]): void;
    groupCollapsed(...label: any[]): void;
    groupEnd(): void;
    groupEnd(): void;
    info(...data: any[]): void;
    info(message?: any, ...optionalParams: any[]): void;
    log(...data: any[]): void;
    log(message?: any, ...optionalParams: any[]): void;
    table(tabularData?: any, properties?: string[] | undefined): void;
    table(tabularData: any, properties?: readonly string[] | undefined): void;
    time(label?: string | undefined): void;
    time(label?: string | undefined): void;
    timeEnd(label?: string | undefined): void;
    timeEnd(label?: string | undefined): void;
    timeLog(label?: string | undefined, ...data: any[]): void;
    timeLog(label?: string | undefined, ...data: any[]): void;
    timeStamp(label?: string | undefined): void;
    timeStamp(label?: string | undefined): void;
    trace(...data: any[]): void;
    trace(message?: any, ...optionalParams: any[]): void;
    warn(...data: any[]): void;
    warn(message?: any, ...optionalParams: any[]): void;
    Console: console.ConsoleConstructor;
    profile(label?: string | undefined): void;
    profileEnd(label?: string | undefined): void;
};
export default _default;
